// Task 1
// Create a class for the book object

class Book {
    // while python uses __init__ to initialize the object, JS uses the constructor method. Also no need to include 'this' as a parameter in the constructor method in JS.
    constructor(title, author, pages) { // A constructor is a special method that is called when an object is created. 
        this.title = title; // unlike pythons 'self' keyword, in JS we use 'this' to refer to the current object.
        this.author = author; // while python objects have attributes, JS objects have properties.
        this.pages = pages; // These are our three properties.
    }
    displayBookInfo() { // This is a method that will display the book information.
        return `Title: ${this.title}, Author: ${this.author}, Pages: ${this.pages}`; // This is the information that will be displayed. ${} is used to insert variables into strings. Similar to f-strings in python.
    }
} // Swigly brackets are important in JS to define the scope of a class or function.

//Example usage:
const book1 = new Book("The Great Gatsby", "F. Scott Fitzgerald", 218); // This is how you create an object in JS. 'new' is a keyword that creates a new object.
// order of the arguments is important. The order of the arguments must match the order of the parameters in the constructor method.

// Task 2
//Exploring Objects and Math in JavaScript

// create a class for the Account object  
class Account {
    constructor(accountNumber, owner, balance = 0) { //we can set balance = 0 in the constructor method to give it a default value. 
        this.accountNumber = accountNumber;
        this.owner = owner;
        this.balance = balance;
    }

    deposit (amount) {
        if (amount > 0) {
            this.balance += amount; // here we are adding the deposit amount to the balance if deposit amount is greater than 0.
            console.log('Deposit successful. New balance: ${this.balance}');
        } else { 
            console.log("Deposit amount must be greater than 0");
        }
    }

    withdraw(amount) { 
        if(amount > 0 && amount <= this.balance) { // here we are checking if the amount is greater than 0 and less than or equal to the balance.
            this.balance -= amount; // here we are subtracting the withdrawal amount from the balance.
            console.log('Withdrawal successful. New balance: ${this.balance}'); // here we are printing the new balance.
        } else {
            console.log('Withdrawal amount must be greater than 0 and less than or equal to the balance'); // here we are printing an error message if the withdrawal amount is invalid.
        }

    }

    calculateInterest(years, rate) { // this method will calculate the interest on the account balance.
        const P = this.balance; // P is the principal amount (the initial balance).
        const r = rate; // r is the interest rate.
        const n = 1; // n is the number of times that interest is compounded per year (compounded annually).
        const t = years; // t is the number of years the money is invested for.

        const A = P * Math.pow((1 + (r/n)), (n * t));
        return Math.ceil(A); // Math.pow is a method that returns the value of a number raised to the power of another number. Math.ceil is a method that rounds a number up to the nearest integer.

    }
}

//Example usage:
const account1 = new Account(12345, "Alice", 1000); // this is how you create an object in JS.  'new' is a keyword that creates a new object.
account1.deposit(500); // this is how you call a method on an object in JS.
account1.withdraw(200); // this is how you call a method on an object in JS.
console.log('Future value after 5 years at 5% interest: ${account1.calculateInterest(5, 0.05)}'); // this is how you call a method on an object in JS.